package com.assignment;
import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
class Account implements Serializable{
	protected int accountnumber;
	protected String accountholder;
	int pinnumber;
	 int balance;
	public Account(int accountnumber, String accountholder, int pinnumber, int balance) {
		super();
		this.accountnumber = accountnumber;
		this.accountholder = accountholder;
		this.pinnumber = pinnumber;
		this.balance = balance;
	}
	public int getAccountnumber() {
		return accountnumber;
	}
	public void setAccountnumber(int accountnumber) {
		this.accountnumber = accountnumber;
	}
	public String getAccountholder() {
		return accountholder;
	}
	public void setAccountholder(String accountholder) {
		this.accountholder = accountholder;
	}
	public int getPinnumber() {
		return pinnumber;
	}
	public void setPinnumber(int pinnumber) {
		this.pinnumber = pinnumber;
	}
	public int getBalance() {
		return balance;
	}
	public void setBalance(int balance) {
		this.balance = balance;
	}
	@Override
	public String toString() {
		return  accountnumber + "\t\t" + accountholder + "\t "
				+ pinnumber + "\t" + balance ;
	}
	
	
}
class BankDatabase implements java.io.Serializable{
	
	static List<Account>acc=new ArrayList<>();
	public BankDatabase(){
	Account a=new Account(101,"Suresh",2343,25234);
	Account b=new Account(102,"Ganesh",5432,34123);
	Account c=new Account(103,"Magesh",7854,26100);
	Account d=new Account(104,"Naresh",2345,80000);
	Account e=new Account(105,"Harish",1907,103400);
	acc.add(a);
	acc.add(b);
	acc.add(c);
	acc.add(d);
	acc.add(e);
	}
	
	

	@Override
	public String toString() {
		return super.toString();
	}



	 public static void   customerdetails() {
	System.out.println("Account_number\t Name\t pin \tbalance");
		for(Account a:acc)
		{
			System.out.println(a.toString());
		}
		
	}
	 public static void checkbalance(int accnum,int pin) {
		 for(Account a:acc) {
			 if(a.accountnumber==accnum) {
				 System.out.println(a.getBalance());
				 break;
			 }
		 }
	 }
	 public static void  withdraw(int accnumber,int amount,int pin) {
		 for(Account a:acc) {
			 if(a.accountnumber==accnumber) {
				 if(a.balance>amount) {
					 a.balance=a.balance-amount;
					 System.out.println("after withdraw"+a.balance);
				 }
				 else {
					 System.out.println("Insufficient Balance ");
				 }
			 }
		 }
	 }
	 public static boolean checkpin(int accnum,int pin) {
		 for(Account a:acc) {
			 if(a.accountnumber==accnum&&a.pinnumber==pin) {
		          return true;
	 }
		 }
		return false;}
		 
	public static void transfer(int accnum,int totransfer,int amount) {
		int flag=0;
		for(Account a:acc) {
			 if(a.accountnumber==accnum) {
				 if(a.balance>amount) {
					 a.balance=a.balance-amount;
				      flag=1;
				 }
				 
				 else {
					 System.out.println("Insufficient Balance ");
				 }
				 }
               }
		 if(flag==1) {
			 for(Account b:acc) {
				 if(b.accountnumber==totransfer) {
						 b.balance=b.balance+amount;}
		                         }
                       }
	}
   public static void serializ()  {
	  
	   try {
		   
		   FileOutputStream fileOut = new FileOutputStream("D:\\assignment\\task1.txt");
           ObjectOutputStream out = new ObjectOutputStream(fileOut);
           out.writeObject(acc);
           out.close();
           fileOut.close();
           System.out.println("\nSerialization Successful... Checkout your specified output file..\n");

		   //FileWriter fw=new FileWriter("D:\\assignment\\task1.txt");
		  // for(Account a:acc) {
		//	   fw.write(a+System.lineSeparator());
		  // }
		   
	   }
	   catch(Exception e) {
		   System.out.println(e);
	   }
   }
  public static void deserialize() throws ClassNotFoundException {
	  try {
          FileInputStream fileIn = new FileInputStream("D:\\assignment\\task1.txt");
          ObjectInputStream in = new ObjectInputStream(fileIn);
          System.out.println("Deserialized Data: \n" + in.readObject().toString()+"\n");
          in.close();
          fileIn.close();
      } catch (FileNotFoundException e) {
          e.printStackTrace();
      } catch (IOException e) {
          e.printStackTrace();
      }
  }


}
class HandleDenomination {
    private int twoThousand;
    private int fiveHundred;
    private int oneHundred;

    public HandleDenomination() {
    	 
    }

    public HandleDenomination(int twoThousand, int fiveHundred, int oneHundred) {
        this.twoThousand = twoThousand;
        this.fiveHundred = fiveHundred;
        this.oneHundred = oneHundred;
    }

    public int getTwoThousand() {
        return twoThousand;
    }

    public void setTwoThousand(int twoThousand) {
        this.twoThousand = twoThousand;
    }

    public int getFiveHundred() {
        return fiveHundred;
    }

    public void setFiveHundred(int fiveHundred) {
        this.fiveHundred = fiveHundred;
    }

    public int getOneHundred() {
        return oneHundred;
    }

    public void setOneHundred(int oneHundred) {
        this.oneHundred = oneHundred;
    }
    public void total() {
    	System.out.print(twoThousand*2000+fiveHundred*500+oneHundred*100);
    }
}
class AtmDatabase{
    private int balaceAmount;
    private  int deposingAmount;
    private int withdrawAmount;

    public AtmDatabase() {
    }

    public AtmDatabase(int balaceAmount, int deposingAmount, int withdrawAmount) {
        this.balaceAmount = balaceAmount;
        this.deposingAmount = deposingAmount;
        this.withdrawAmount = withdrawAmount;
    }

    public int getBalaceAmount() {
        return balaceAmount;
    }

    public void setBalaceAmount(int balaceAmount) {
        this.balaceAmount = balaceAmount;
    }

    public int getDeposingAmount() {
        return deposingAmount;
    }

    public void setDeposingAmount(int deposingAmount) {
        this.deposingAmount = deposingAmount;
    }

    public int getWithdrawAmount() {
        return withdrawAmount;
    }

    public void setWithdrawAmount(int withdrawAmount) {
        this.withdrawAmount = withdrawAmount;
    }
}
class HandleAtm {
	static Scanner sc=new Scanner(System.in);
    
    public static void updateDenomination(int amount, int denomination, HandleDenomination handleDenomination){
        if(amount==2000){
                handleDenomination.setTwoThousand(handleDenomination.getTwoThousand()+denomination);
        }
        else if(amount==500){
                handleDenomination.setFiveHundred(handleDenomination.getFiveHundred()+denomination);
        }
        else if(amount==100){
                handleDenomination.setOneHundred(handleDenomination.getOneHundred()+denomination);
        }
    }

    public static int reduceDenomination(int amount, int denomination, HandleDenomination handleDenomination){
        int flag1=0, flag2=0;
        if(amount==2000){
            if(handleDenomination.getTwoThousand()>0){
                handleDenomination.setTwoThousand(handleDenomination.getTwoThousand()-denomination);
                return 1;
            }
            else if(handleDenomination.getFiveHundred()>0){
                flag1=1;
                handleDenomination.setFiveHundred(handleDenomination.getFiveHundred()-denomination);
            }
            else if(handleDenomination.getOneHundred()>0){
                flag2=1;
                handleDenomination.setOneHundred(handleDenomination.getOneHundred()-denomination);
            }
        }
        else if(amount==500){
            if(handleDenomination.getFiveHundred()>0){
                if(flag1==0){
                    handleDenomination.setFiveHundred(handleDenomination.getFiveHundred()-denomination);
                    return 1;
                }
            }
            else if(handleDenomination.getOneHundred()>0)
                if(flag2==0)
                handleDenomination.setOneHundred(handleDenomination.getOneHundred()-denomination);
        }
        else if(amount==100){
            if(handleDenomination.getOneHundred()>0){
                if(flag2==0){
                handleDenomination.setOneHundred(handleDenomination.getOneHundred()-denomination);
                return 1;}
            }
        }
        return -1;
        
        
       
    }

    public static void updateDepositingAmount(AtmDatabase atmDatabase, HandleDenomination handleDenomination){
        int depositingAmount=handleDenomination.getTwoThousand()*2000+handleDenomination.getFiveHundred()*500+handleDenomination.getOneHundred()*100;
        atmDatabase.setDeposingAmount(depositingAmount);
        atmDatabase.setBalaceAmount(atmDatabase.getDeposingAmount());
        System.out.println(depositingAmount);
    }

    public static void updateWithdraw(AtmDatabase atmDatabase, int withdrawAmount){
        atmDatabase.setWithdrawAmount(withdrawAmount);
        atmDatabase.setBalaceAmount(atmDatabase.getBalaceAmount()-withdrawAmount);
    }

    public static int[] dispensingDenomination(int[] notes, int withdrawAmount){
        int[] noteCounter=new int[notes.length];
        for(int i=0;i<notes.length;i++){
            if(withdrawAmount>=notes[i]){
                noteCounter[i]=withdrawAmount/notes[i];
                withdrawAmount=withdrawAmount-noteCounter[i]*notes[i];
            }
        }
        return noteCounter;
    }

    public static void loadcash() {
   	 String[] denominations=sc.nextLine().split(",");
        int flag=1;
        AtmDatabase atmDatabase=new AtmDatabase();
		HandleDenomination handleDenomination=new HandleDenomination ();
		for(String seperate:denominations){
            String[] values=seperate.split(":");
            int amount=Integer.valueOf(values[0].trim());
            int denomination=Integer.valueOf(values[1]);
            if(amount<0||denomination<0){
                System.out.println("Incorrect Deposit amount");
            }
            else if (amount==0||denomination==0){
                System.out.println("Deposit amount cannot be Zero");
            }
            else{
                updateDenomination(amount, denomination, handleDenomination);
            }
        }

                 updateDepositingAmount(atmDatabase, handleDenomination);


        System.out.println("Denomination            Number  Value       ");
        System.out.println("2000                    "+((HandleDenomination) handleDenomination).getTwoThousand()+"       "+2000*((HandleDenomination) handleDenomination).getTwoThousand());
        System.out.println("500                     "+((HandleDenomination) handleDenomination).getFiveHundred()+"       "+500*((HandleDenomination) handleDenomination).getFiveHundred());
        System.out.println("100                     "+((HandleDenomination) handleDenomination).getOneHundred()+"       "+100*((HandleDenomination) handleDenomination).getOneHundred());
       
}
    public static void getatmbalance() {
    	AtmDatabase atmDatabase=new AtmDatabase();
		HandleDenomination handleDenomination=new HandleDenomination ();
		//System.out.println(((HandleDenomination) handleDenomination).getTwoThousand()+((HandleDenomination) handleDenomination).getOneHundred()+((HandleDenomination) handleDenomination).getFiveHundred());
    }
}

public class Task {

	public static void main(String[] args) throws ClassNotFoundException {
		// TODO Auto-generated method stub
		Scanner sc =new Scanner(System.in);
		 BankDatabase b=new BankDatabase();
		 HandleAtm h =new HandleAtm();
		 HandleDenomination d=new HandleDenomination ();
		 AtmDatabase atmDatabase=new AtmDatabase();
   while(true) {
	  
	   System.out.println("Enter 1 to load cash");
	   System.out.println("Enter 2 to view customerdetails");
	   System.out.println("Enter 3 to transfer or withdraw or checkbalance");
	   System.out.println("Enter the option:");
	   int option=sc.nextInt();
	   switch(option) {
	    case 1:
	    {
            System.out.println("--------    Load ATM    --------");
            System.out.println("Enter the Denomination to deposit(2000:10, 500:5) : ");
            h.loadcash();
            break;
        }
	    case 2:
	    	b.customerdetails() ; 
	    	b.serializ();
	    	b.deserialize();
	    	break;
	    case 3:
	    	System.out.println("1 to check balance:");
	    	System.out.println("2 to Withdraw:");
	    	System.out.println("3 to transfer:");
	    	System.out.println("Enter the enquiry option:");
	    	int enquiry=sc.nextInt();
	    	System.out.println("Enter the account number:");
	    	int accnum=sc.nextInt();
	    	System.out.println("Enter the pin:");
	    	int pin=sc.nextInt();
	    	if(b.checkpin(accnum,pin)) {
           switch(enquiry) {
            case 1:
            	System.out.println("BALANCE IS:");
            	 b.checkbalance(accnum,pin); 
            	 b.serializ();
            	 b.deserialize();
            	break;
            case 2:
            	System.out.println("Enter the amount to withdraw:");
            	int amount=sc.nextInt();
            	b.withdraw(accnum,amount,pin);
            	b.serializ();
            	b.deserialize();
            	break;
            case 3:
            	System.out.println("Enter the accont number to transfer: ");
            	int totransfer=sc.nextInt();
            	System.out.println("Enter the amount  to transfer: ");
            	int amounttotransfer=sc.nextInt();
            	b.transfer(accnum,totransfer,amounttotransfer);
            	b.serializ();
            	b.deserialize();
            	break;
           }
	    	}
	    	else {
	    		System.out.println("incorect pin");
	    	}
           
           break;
	    case 4:{
	    	//h.getatmbalance();
	    	d.total();
        	break;
	    }
     
	   }
   }
	}


}
